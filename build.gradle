plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.8.1'
}

repositories {
    mavenCentral()
}

def allureVersion = '2.14.0',
    selenideVersion = '5.24.0',
    junitVersion = '5.9.3'

allure {
    version = allureVersion
    autoconfigure = true
    aspectjweaver = true
    configuration = "testImplementation"
    useJUnit5 {
        version = allureVersion
    }
}

dependencies {
    testImplementation(
            'org.aspectj:aspectjweaver:1.9.19',
            "io.rest-assured:rest-assured:5.3.1",
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.appium:java-client:7.3.0",
            "org.aeonbits.owner:owner:1.0.12",
            "com.github.javafaker:javafaker:1.0.2",
            "org.aeonbits.owner:owner:1.0.12",
            "org.junit.jupiter:junit-jupiter:$junitVersion")
    testRuntimeOnly(
            'org.slf4j:slf4j-simple:2.0.5',
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    /*if (System.getProperty("threads") != null) {
        systemProperties += [
                "junit.jupiter.execution.parallel.enabled"                 : "true",
                "junit.jupiter.execution.parallel.mode.default"            : "concurrent",
                "junit.jupiter.execution.parallel.mode.classes.default"    : "concurrent",
                "junit.jupiter.execution.parallel.config.strategy"         : "fixed",
                "junit.jupiter.execution.parallel.config.fixed.parallelism": System.getProperty("threads").toInteger()
        ]
    }*/

    testLogging {
        lifecycle {
//            events "started", "failed"
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

test {
    useJUnitPlatform()
    systemProperties(System.getProperties())
}

task test_mobile(type: Test) {
    useJUnitPlatform {
        includeTags "test_mobile"
    }
}

task test_ui(type: Test) {
    useJUnitPlatform {
        includeTags "test_ui"
    }
}

task test_api(type: Test) {
    useJUnitPlatform {
        includeTags "test_api"
    }
}